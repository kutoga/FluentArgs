[![Build Status](https://dev.azure.com/benjaminmeier70/PipelinePlayground/_apis/build/status/kutoga.FluentArgs?branchName=master)](https://dev.azure.com/benjaminmeier70/PipelinePlayground/_build/latest?definitionId=3&branchName=master)

# FluentArgs: Fluent Argument Parsing for .NET
<strong>
Version:
!SCRIPT:bash ./scripts/version.sh
</strong>

FluentArgs is an easy-to-use library that provides command line argument parsing. For all parameters it is possible
to provide meta information (description, examples etc.) which might be used to auto-generate a simple help for the
final application.

# Why FluentArgs?

The API is optimized to be as readable and type-safe as possible. Therefore, anyone can learn how to use this library
in just a few minutes.

![](doc/gif-example/example.gif)

# How to install
Package Manager:
```
PM> Install-Package FluentArgs
```

.NET CLI:
```
> dotnet add package FluentArgs
```

Paket CLI:
```
> paket add FluentArgs
```

# TODO: Write down why ConfigureWithDefaults is recommended (or do not use it)

# 💡 Example: Parse simple arguments and flags
Given you want a program which supports png to jpeg conversion and you want to support calls like these:
- `myapp -i image.png -o image.jpeg -q 100`
- `myapp --input image.png --quality 50 --output image.jpeg`
- `myapp --input=image.png -q=50 --output image.jpeg`
- etc.

There's the code:
```csharp
!INCLUDE:examples/Simple01.cs
```

You might wonder why the order of parameters for the `Call`-method are inverted. This is due to a limitation
of the C#-programming language: If the order should be reversed, the number of parameters has to be limited
to a fixed number. At least it is not obvious how something like variadic templates can be implemented.

You want to have a detailed help? Just annotate all parameters and call `myapp -h` or `myapp --help`.
The help flag is added by the `DefaultConfigs...`-call. As you can see later, it is possible to disable the
help flag, to use a different help flag name or to customize the help output. It is also possible use async
code.

In general it is recommended to add `DefaultConfigs()` to the parser: It adds the help flags (which still
might be overwritten) and some additional validations (see **Example: Advanced configuration**).
```csharp
!INCLUDE:examples/Simple02.cs
```

# 💡 Example: Parse positional and remaining arguments
Positional arguments without an explicit name might be used if the context defines their meaning. E.g.
`find --type f ./my_directory` shall be parsed. An equivalent call is `find ./my_directory --type f`. The
source directory is a positional argument.

Such arguments can be defined after all simple arguments and flags are defined:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/PositionalRemaining01.cs
```

</details>

It is no problem to define multiple positional arguments:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/PositionalRemaining02.cs
```

</details>

It is also possible to parse all remaining arguments. E.g., if calls like `rm -f file1 file2 file` should
be supported (with an arbitrary number of files), this can be achieved by the following code:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/PositionalRemaining03.cs
```

</details>

# 💡 Example: Parse conditional arguments / commands
Conditional arguments allow to control the argument parsing flow. E.g., the reuqirements for our CLI is
the following:
- If the flag `-v` (or `--version`) is given, the program version should be print (independent of all other parameters)
- If the flag `-u` (or `--update`) is given, an update should be downloaded and installed
  - An optional parameter `-s` (or `--source`) defines the update source
- Otherwise the program takes it first two positional arguments and prints their sum: `myapp 1 2` should print `1+2=3`

The following code fulfills this specifications:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/Given01.cs
```

</details>

Assuming you want to create an application to do some file system actions on a remote system. It is required
to use a key to access this remote system. There are "commands" for this file system which lead to the following
calls:
- `myapp --apykey key --command init`
- `myapp --apikey key --command delete --file /myfile`
- `myapp --apikey key --command move --source /opt/source --destination /opt/target`

Becaused all these operations may take long, an additional parameter `--timeout` can be added to each of the
defined calls.

If `--command` has an unknown value or does not exsit, the program call is invalid.

This parameter parsing specification can be implemented with the following code:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/Given02.cs
```

</details>

# 💡 Example: List parameter
List parameters can contain multiple values per key. E.g., if a program has to parse a list of
names, a call like `myapp --names=Peter;Paul;Kevin` should be used to input these names.

The code:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/ListParameter01.cs
```

</details>

Default separators are `;` and `,`, bu they might be overwritten, e.g. by ` `:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/ListParameter02.cs
```

</details>

# 💡 Example: Async vs Blocking
Both, async and blocking, calls are supported. An async example:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/AsyncBlocking01.cs
```

</details>

A blocking example:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/AsyncBlocking02.cs
```

</details>

# 💡 Example: Parsing and validation
There are already parsers for many data types implemented: all types of `int`, `char`, `bool`,
`DateTime`, `DateTimeOffset`, `decimal`, `double`, `float`, `byte`, `Uri`, `string` (which is
trivial) and enums

It might happen that you have to implement your own parser. It is always possible to define a
parser to any definition. There are even cases where not every value in the parsed domain is
valid. E.g., if you need a value greater than or equal to 0 and smaller than or equal to 100.
The int-parser would be a good choice and an additional validation might be used to force the
value to be in the correct range.

The following application implements a parser that is able to parse binary numbers. This number
is then validated: It must be greater or equal to 0 and smaller or equal to 100. An example
call would be `myapp -b=101`.
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/ParserValidation01.cs
```

</details>

# 💡 Example: Help
It is possible to add descriptive metadata to all elements and, of course, it is also possible
to print the user what possibilities war available.

To enable a help flag, it is possible to configure the argument parser with the default
configs (e.g. the first call should be `.DefaultConfigs()` or `DefaultConfigsWithAppDescription(...)`).
This adds the help flags `-h` and `--help`. Independent of the default configs, if you want to define
a custom help flag, this can be done with `.RegisterHelpFlag(...)`.

To make the help useful, you probably want to add `.WithDescription(...)` and maybe even `.WithExamples(...)`
to all your parameter definitions.

Here is a simple application that offers help to the user:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/Help01.cs
```

</details>

If this tool is called with the `--help` (or `-h`) flag, the output looks like this:
```
!SCRIPT:bash ./scripts/dotnet_call.sh ./examples/Help01.cs --help
```

There might be reasons why the output of the help printer is not optimal for some use-cases. To handle this,
it is possible to use a custom help printer: It just has to implement `FluentArgs.Help.IHelpPrinter`. The
default help printer is `FluentArgs.Help.SimpleHelpPrinter`. It can be configured to use another output
stream.

The following code shows how a help printer can be defined:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/Help02.cs
```

</details>

# 💡 Example: Handle errors
Errors? Yes, parsing errors. It might happen that users
- do not input required parameters
- do input invalid values (e.g. a text instead of a number)
- do input values that fail in the validation step

How to handle these cases? They are all automatically handled by FluentArgs. To give the user optimal help
it is recommended to annotate all parameters with a description and examples.

The following code is used to demonstarte how error outputs look like:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/HandleErrors01.cs
```

</details>

<details>
    <summary>📃 Click here to see the different outputs</summary>

Given the call `myapp` (missing parameter) produces this output:
```
!SCRIPT:bash ./scripts/dotnet_call.sh examples/HandleErrors01.cs | sed -r 's/DummyProject/myapp/g'
```

Given the call `myapp -n X` (invalid parameter type) produces this output:
```
!SCRIPT:bash ./scripts/dotnet_call.sh examples/HandleErrors01.cs -n X | sed -r 's/DummyProject/myapp/g'
```

Given the call `myapp -n 0` (validation fails) produces this output:
```
!SCRIPT:bash ./scripts/dotnet_call.sh examples/HandleErrors01.cs -n 0 | sed -r 's/DummyProject/myapp/g'
```

</details>

Actually, it might happen that the success information is relevant. For this reason all `Parse*(...)`-calls
return a `bool` (or `Task<bool>`). An example:

<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INLCUDE:example/HandleErrors02.cs
```

</details>

Finally, it might be the case that the predefined error-printers are not optimal for some use-cases. For
this reason it is possible to define custom parsing error printers. This can be done by implementing the
`IParsingErrorPrinter` and by assigning it with `RegisterParsingErrorPrinter`. It is also possible to
create a custom instance of the predefined parsing error printer (e.g. if you do not want to write the
error messages to stderr).

The following coe shows how to do these things:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/HandleErrors03.cs
```

</details>

Finally, one might ask what happens with application errors: Actually nothing special. If inside of the
`Call...(...)`-method an exception is thrown, it is not handled by FluentArgs. This must be done by the
called application code.

# 💡 Example: Parser definition sections
Any parser definition with FluentArgs contains some natural definition sections. They describe different stages
of the parsing process. In general, parsing is done in the same order as the description is given. All sections
except the final `Call` are **optional**.
The flow is shown in the following example:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/ParserSections01.cs
```

</details>

# 💡 Example: Advanced configuration
As described in the parser definition section, it is possible to configure several general parser options.
In the following table, all advanced configuration options are described:

|Configuration-Code|Description|
|-|-|
|`.RegisterParsingErrorPrinter(...)`            |Register a custom parsing error printer (see: **Example: Handle errors**).|
|`.RegisterHelpPrinter(...)`                    |Register a custom help printer (see: **Example: Help**).|
|`.RegisterHelpFlag("-h", "--help-flag")`       |Register help flags (default case: no help flags are defined).|
|`.WithApplicationDescription("my app is cool")`|A description of the application (see: **Example: Help**).|
|`.WithAssignmentOperators("=")`                |Define (one or more) custom assignment operators; they are used to optionally separate values for parameters. E.g. `--name=Karl`. The default is just "=".|
|`.WithoutAssignmentOperators()`                |Remove all assignment operators. Especially disable the default assignment operator "="|
|`.ThrowIfUnusedArgumentsArePresent()`          |Given all specified parameters are parsed at runtime, but there are still some program arguments left: throw an Exception|
|`.ThrowOnDuplicateNames()`                     |Throw if a parameter name is twice defined in the same flow. Otherwise it is valid to use the same name twice.|
|`.ThrowOnNonMinusStartingNames()`              |Throw if there is a parameter name which does not start with "-".|
|`.RegisterDefaultHelpFlags()`                  |Equivalent to `.RegisterHelpFlag("-h", "--help")`.|
|`.DefaultConfigs()`                            |Equivalent to `.RegisterDefaultHelpFlags().ThrowOnDuplicateNames().ThrowOnNonMinusStartingNames().ThrowIfUnusedArgumentsArePresent()`.|
|`.DefaultConfigsWithAppDescription(...)`       |Equivalent to `.DefaultConfigs().WithApplicationDescription(...)`.|

# 💡 Example: Reuse parser
It might be the case that you want to reuse a parser. In this case it is more efficient to explicit build
the internal tree with the `.Build()` method and use the resulting parser.
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/ReuseParser01.cs
```

</details>

# 💡 Example: Untyped call
As shown, there is a `Call`-method on the parser which is used to finally call the application code. This
method uses static typed arguments. It is also possible to get all arguments as a single collection of
`object?`s.

An example is shown in the following code:
<details>
    <summary>📃 Click here to see the code</summary>

```csharp
!INCLUDE:examples/UntypedCall01.cs
```

</details>

# Best practices
TODO:
- E.g. just call one method in `Call`. etc.

